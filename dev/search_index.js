var documenterSearchIndex = {"docs":
[{"location":"representations/reprs/#Group-representations","page":"Representations","title":"Group representations","text":"","category":"section"},{"location":"representations/reprs/","page":"Representations","title":"Representations","text":"AbstractGroupRepresentation\naction(::AbstractGroupRepresentation)\ngroup(ρ::AbstractGroupRepresentation)\nspace(::AbstractGroupRepresentation)\ndim(ρ::AbstractGroupRepresentation)","category":"page"},{"location":"representations/reprs/#DecomposingGroupRepresentations.AbstractGroupRepresentation","page":"Representations","title":"DecomposingGroupRepresentations.AbstractGroupRepresentation","text":"AbstractGroupRepresentation{T<:GroupType, S<:AbstractSpace}\n\nAn abstract type representing a group representation. The type T represents a GroupType, and S represents an AbstractSpace.\n\n\n\n\n\n","category":"type"},{"location":"representations/reprs/#DecomposingGroupRepresentations.action-Tuple{AbstractGroupRepresentation}","page":"Representations","title":"DecomposingGroupRepresentations.action","text":"action(::AbstractGroupRepresentation) -> AbstractGroupAction\n\nReturns the group action associated with the given group representation.\n\n\n\n\n\n","category":"method"},{"location":"representations/reprs/#DecomposingGroupRepresentations.group-Tuple{AbstractGroupRepresentation}","page":"Representations","title":"DecomposingGroupRepresentations.group","text":"group(ρ::AbstractGroupRepresentation) -> AbstractGroup\n\nReturns the group associated with the given group representation.\n\n\n\n\n\n","category":"method"},{"location":"representations/reprs/#DecomposingGroupRepresentations.space-Tuple{AbstractGroupRepresentation}","page":"Representations","title":"DecomposingGroupRepresentations.space","text":"space(::AbstractGroupRepresentation) -> AbstractSpace\n\nReturns the vector space on which the given group representation acts.\n\n\n\n\n\n","category":"method"},{"location":"representations/reprs/#DecomposingGroupRepresentations.dim-Tuple{AbstractGroupRepresentation}","page":"Representations","title":"DecomposingGroupRepresentations.dim","text":"dim(ρ::AbstractGroupRepresentation) -> Int\n\nReturns the dimension of the vector space on which the given group representation acts.\n\n\n\n\n\n","category":"method"},{"location":"representations/reprs/#GroupRepresentation","page":"Representations","title":"GroupRepresentation","text":"","category":"section"},{"location":"representations/reprs/","page":"Representations","title":"Representations","text":"GroupRepresentation","category":"page"},{"location":"representations/reprs/#DecomposingGroupRepresentations.GroupRepresentation","page":"Representations","title":"DecomposingGroupRepresentations.GroupRepresentation","text":"GroupRepresentation <: AbstractGroupRepresentation\n\nRepresents a group representation. Consists of a group action and a vector space.\n\nConstructors\n\nGroupRepresentation(a::AbstractGroupAction, V::AbstractSpace)\n\nExamples\n\njulia> @polyvar x[1:3];\n\njulia> SO3 = LieGroup(\"SO\", 3);\n\njulia> a = MatrixGroupAction(SO3, [x]);\n\njulia> V = FixedDegreePolynomials(x, 2);\n\njulia> ρ = GroupRepresentation(a, V)\nGroupRepresentation of SO(3) on 6-dimensional vector space\n Lie group: SO(3)\n\njulia> dim(ρ)\n6\n\njulia> group(ρ)\nLieGroup SO(3)\n number type (or field): ComplexF64\n weight type: Int64\n Lie algebra properties:\n  dimension: 3\n  rank (dimension of Cartan subalgebra): 1\n\n\n\n\n\n","category":"type"},{"location":"representations/reprs/#IrreducibleRepresentation","page":"Representations","title":"IrreducibleRepresentation","text":"","category":"section"},{"location":"representations/reprs/","page":"Representations","title":"Representations","text":"IrreducibleRepresentation","category":"page"},{"location":"representations/reprs/#DecomposingGroupRepresentations.IrreducibleRepresentation","page":"Representations","title":"DecomposingGroupRepresentations.IrreducibleRepresentation","text":"IrreducibleRepresentation <: AbstractGroupRepresentation\n\nRepresents an irreducible group representation.\n\nExamples\n\njulia> @polyvar x y z;\n\njulia> vars = [x, y, z];\n\njulia> SO3 = LieGroup(\"SO\", 3);\n\njulia> a = MatrixGroupAction(SO3, [vars]);\n\njulia> V = FixedDegreePolynomials(vars, 2);\n\njulia> ρ = GroupRepresentation(a, V);\n\njulia> irr_decomp = irreducibles(ρ)\nIrreducibleDecomposition of SO(3)-action on 6-dimensional vector space\n number of irreducibles: 2\n dimensions of irreducibles: 1, 5\n\njulia> irr_decomp[2]\nIrreducibleRepresentation of dimension 5\n Lie group: SO(3)\n highest weight: [2]\n\njulia> space(irr_decomp[2])\nHighestWeightModule of dimension 5\n Lie group: SO(3)\n highest weight: [2]\n\njulia> basis(space(irr_decomp[2]))\n5-element Vector{Polynomial{Commutative{CreationOrder}, Graded{LexOrder}, ComplexF64}}:\n -y² + (0.0 + 2.0im)xy + x²\n (0.0 + 1.0im)yz + xz\n (2.0 + 0.0im)z² + -y² + -x²\n (0.0 + 1.0im)yz + -xz\n -y² + (-0.0 - 2.0im)xy + x²\n\n\n\n\n\n","category":"type"},{"location":"representations/reprs/#IsotypicComponent","page":"Representations","title":"IsotypicComponent","text":"","category":"section"},{"location":"representations/reprs/","page":"Representations","title":"Representations","text":"IsotypicComponent","category":"page"},{"location":"representations/reprs/#DecomposingGroupRepresentations.IsotypicComponent","page":"Representations","title":"DecomposingGroupRepresentations.IsotypicComponent","text":"IsotypicComponent <: AbstractGroupRepresentation\n\nRepresents an isotypic component of a group representation, i.e. a direct sum of isomorphic irreducible representations.\n\nExamples\n\njulia> @polyvar x[1:3] y[1:3];\n\njulia> SO3 = LieGroup(\"SO\", 3);\n\njulia> a₁ = MatrixGroupAction(SO3, [x, y]);\n\njulia> a₂ = ScalingLieGroupAction(vcat(x, y));\n\njulia> a = a₁ × a₂;\n\njulia> V = FixedDegreePolynomials(vcat(x, y), 2);\n\njulia> ρ = GroupRepresentation(a, V)\nGroupRepresentation of SO(3) × ℂˣ on 21-dimensional vector space\n Lie group: SO(3) × ℂˣ\n\njulia> iso_decomp = isotypics(ρ)\nIsotypicDecomposition of SO(3) × ℂˣ-action on 21-dimensional vector space\n number of isotypic components: 3\n multiplicities of irreducibles: 3, 3, 1\n dimensions of irreducibles: 1, 5, 3\n dimensions of isotypic components: 3, 15, 3\n\njulia> iso = isotypics(iso_decomp)\n3-element Vector{IsotypicComponent}:\n IsotypicComponent with (dim, mul) = (3, 3)\n IsotypicComponent with (dim, mul) = (15, 3)\n IsotypicComponent with (dim, mul) = (3, 1)\n\njulia> iso[1]\nIsotypicComponent of dimension 3, multiplicity 3\n Lie group: SO(3) × ℂˣ\n highest weight: [0, 2]\n dimension of irreducible subrepresentation: 1\n multiplicity of irreducible subrepresentation: 3\n\njulia> space(iso[1])\nDirectSum of dimension 3\n nsummands: 3\n dimensions of summands: 1, 1, 1\n\njulia> basis(iso[1])\n3-element Vector{Polynomial{Commutative{CreationOrder}, Graded{LexOrder}, ComplexF64}}:\n x₃² + x₂² + x₁²\n y₃² + y₂² + y₁²\n -x₃y₃ + -x₂y₂ + -x₁y₁\n\n\n\n\n\n","category":"type"},{"location":"groups/types/#Types-of-groups","page":"Types of groups","title":"Types of groups","text":"","category":"section"},{"location":"groups/types/","page":"Types of groups","title":"Types of groups","text":"GroupType\nFinite\nLie\nMixed\nAbstractGroup","category":"page"},{"location":"groups/types/#DecomposingGroupRepresentations.GroupType","page":"Types of groups","title":"DecomposingGroupRepresentations.GroupType","text":"abstract type GroupType end\n\nAbstract type representing a group type in the context of decomposing representations. The concrete types are Finite, Lie and Mixed.\n\n\n\n\n\n","category":"type"},{"location":"groups/types/#DecomposingGroupRepresentations.Finite","page":"Types of groups","title":"DecomposingGroupRepresentations.Finite","text":"struct Finite <: GroupType end\n\nRepresents a finite group type. This type is used to categorize groups that have a finite number of elements.\n\n\n\n\n\n","category":"type"},{"location":"groups/types/#DecomposingGroupRepresentations.Lie","page":"Types of groups","title":"DecomposingGroupRepresentations.Lie","text":"struct Lie <: GroupType end\n\nRepresents a Lie group type.\n\n\n\n\n\n","category":"type"},{"location":"groups/types/#DecomposingGroupRepresentations.Mixed","page":"Types of groups","title":"DecomposingGroupRepresentations.Mixed","text":"struct Mixed <: GroupType end\n\nRepresents a mixed group type. This type is used in direct products of finite groups with Lie groups.\n\n\n\n\n\n","category":"type"},{"location":"groups/types/#DecomposingGroupRepresentations.AbstractGroup","page":"Types of groups","title":"DecomposingGroupRepresentations.AbstractGroup","text":"AbstractGroup{T<:GroupType, F}\n\nAn abstract type representing a reductive group. The type T represents a GroupType, while F represents the number field (or number type) over which the group is defined.\n\n\n\n\n\n","category":"type"},{"location":"decompose/isotypic/#Isotypic-decomposition","page":"Isotypic decomposition","title":"Isotypic decomposition","text":"","category":"section"},{"location":"decompose/isotypic/","page":"Isotypic decomposition","title":"Isotypic decomposition","text":"IsotypicDecomposition\nisotypics(::AbstractGroupRepresentation)","category":"page"},{"location":"decompose/isotypic/#DecomposingGroupRepresentations.IsotypicDecomposition","page":"Isotypic decomposition","title":"DecomposingGroupRepresentations.IsotypicDecomposition","text":"IsotypicDecomposition\n\nRepresents the isotypic decomposition of a group representation.\n\nConstructors\n\nIsotypicDecomposition(ρ::GroupRepresentation)\n\nExamples\n\njulia> @polyvar x[1:3] y[1:3];\n\njulia> SO3 = LieGroup(\"SO\", 3);\n\njulia> a₁ = MatrixGroupAction(SO3, [x, y]);\n\njulia> a₂ = ScalingLieGroupAction(vcat(x, y));\n\njulia> a = a₁ × a₂;\n\njulia> V = FixedDegreePolynomials(vcat(x, y), 2);\n\njulia> ρ = GroupRepresentation(a, V)\nGroupRepresentation of SO(3) × ℂˣ on 21-dimensional vector space\n Lie group: SO(3) × ℂˣ\n\njulia> isotypics(ρ)\nIsotypicDecomposition of SO(3) × ℂˣ-action on 21-dimensional vector space\n number of isotypic components: 3\n multiplicities of irreducibles: 3, 3, 1\n dimensions of irreducibles: 1, 5, 3\n dimensions of isotypic components: 3, 15, 3\n\n\n\n\n\n","category":"type"},{"location":"decompose/isotypic/#DecomposingGroupRepresentations.isotypics-Tuple{AbstractGroupRepresentation}","page":"Isotypic decomposition","title":"DecomposingGroupRepresentations.isotypics","text":"isotypics(::AbstractGroupRepresentation) -> IsotypicDecomposition\n\nReturns the decomposition into isotypic components of the given group representation.\n\n\n\n\n\n","category":"method"},{"location":"groups/finite/#Finite-groups","page":"Finite groups","title":"Finite groups","text":"","category":"section"},{"location":"groups/finite/","page":"Finite groups","title":"Finite groups","text":"TBW","category":"page"},{"location":"groups/products/#Direct-product-of-groups","page":"Direct products","title":"Direct product of groups","text":"","category":"section"},{"location":"groups/products/","page":"Direct products","title":"Direct products","text":"AbstractDirectProductGroup\nDirectProductGroup","category":"page"},{"location":"groups/products/#DecomposingGroupRepresentations.AbstractDirectProductGroup","page":"Direct products","title":"DecomposingGroupRepresentations.AbstractDirectProductGroup","text":"AbstractDirectProductGroup{T<:GroupType, F} <: AbstractGroup{T, F}\n\nAn abstract type representing a direct product group.\n\n\n\n\n\n","category":"type"},{"location":"groups/products/#DecomposingGroupRepresentations.DirectProductGroup","page":"Direct products","title":"DecomposingGroupRepresentations.DirectProductGroup","text":"DirectProductGroup{T<:GroupType, F} <: AbstractDirectProductGroup{T, F}\n\nRepresents a direct product of groups.\n\nExamples\n\njulia> SO3 = LieGroup(\"SO\", 3);\n\njulia> T = ScalingLieGroup{ComplexF64}([1 2 3 4; -1 -2 -3 -4]);\n\njulia> SO3 × SO3 × T\nDirectProductGroup SO(3) × SO(3) × (ℂˣ)²\n number type (or field): ComplexF64\n 3 factors: SO(3), SO(3), (ℂˣ)²\n Lie algebra:\n  SumLieAlgebra 𝖘𝖔(3) ⊕ 𝖘𝖔(3) ⊕ ℂ²\n  dimension: 8\n  rank (dimension of Cartan subalgebra): 4\n\n\n\n\n\n","category":"type"},{"location":"decompose/irreducible/#Irreducible-decomposition","page":"Irreducible decomposition","title":"Irreducible decomposition","text":"","category":"section"},{"location":"decompose/irreducible/","page":"Irreducible decomposition","title":"Irreducible decomposition","text":"IrreducibleDecomposition\nirreducibles(::AbstractGroupRepresentation)","category":"page"},{"location":"decompose/irreducible/#DecomposingGroupRepresentations.IrreducibleDecomposition","page":"Irreducible decomposition","title":"DecomposingGroupRepresentations.IrreducibleDecomposition","text":"IrreducibleDecomposition\n\nRepresents a decomposition of a group representation into a collection of irreducible representations.\n\nConstructors\n\nIrreducibleDecomposition(ρ::GroupRepresentation)\n\nExamples\n\njulia> @polyvar x y z;\n\njulia> vars = [x, y, z];\n\njulia> SO3 = LieGroup(\"SO\", 3);\n\njulia> a = MatrixGroupAction(SO3, [vars]);\n\njulia> V = FixedDegreePolynomials(vars, 2);\n\njulia> ρ = GroupRepresentation(a, V);\n\njulia> irreducibles(ρ)\nIrreducibleDecomposition of SO(3)-action on 6-dimensional vector space\n number of irreducibles: 2\n dimensions of irreducibles: 1, 5\n\n\n\n\n\n","category":"type"},{"location":"decompose/irreducible/#DecomposingGroupRepresentations.irreducibles-Tuple{AbstractGroupRepresentation}","page":"Irreducible decomposition","title":"DecomposingGroupRepresentations.irreducibles","text":"irreducibles(::AbstractGroupRepresentation) -> IrreducibleDecomposition\n\nReturns a decomposition into irreducible subrepresentations of the given group representation.\n\n\n\n\n\n","category":"method"},{"location":"representations/spaces/#Vector-spaces","page":"Vector spaces","title":"Vector spaces","text":"","category":"section"},{"location":"representations/spaces/","page":"Vector spaces","title":"Vector spaces","text":"AbstractSpace\nbasis(::AbstractSpace)\ndim(::AbstractSpace)","category":"page"},{"location":"representations/spaces/#DecomposingGroupRepresentations.AbstractSpace","page":"Vector spaces","title":"DecomposingGroupRepresentations.AbstractSpace","text":"AbstractSpace{F}\n\nAn abstract type representing a vector space. The type F represents the number field (or number type) over which the vector space is defined.\n\n\n\n\n\n","category":"type"},{"location":"representations/spaces/#DecomposingGroupRepresentations.basis-Tuple{AbstractSpace}","page":"Vector spaces","title":"DecomposingGroupRepresentations.basis","text":"basis(::AbstractSpace)\n\nReturns a basis of the given vector space.\n\n\n\n\n\n","category":"method"},{"location":"representations/spaces/#DecomposingGroupRepresentations.dim-Tuple{AbstractSpace}","page":"Vector spaces","title":"DecomposingGroupRepresentations.dim","text":"dim(::AbstractSpace) -> Int\n\nReturns the dimension of the given vector space.\n\n\n\n\n\n","category":"method"},{"location":"representations/spaces/#PolySpace","page":"Vector spaces","title":"PolySpace","text":"","category":"section"},{"location":"representations/spaces/","page":"Vector spaces","title":"Vector spaces","text":"PolySpace","category":"page"},{"location":"representations/spaces/#DecomposingGroupRepresentations.PolySpace","page":"Vector spaces","title":"DecomposingGroupRepresentations.PolySpace","text":"PolySpace <: AbstractSpace\n\nA structure representing a vector space generated by polynomials.\n\n\n\n\n\n","category":"type"},{"location":"representations/spaces/#Direct-sums","page":"Vector spaces","title":"Direct sums","text":"","category":"section"},{"location":"representations/spaces/","page":"Vector spaces","title":"Vector spaces","text":"AbstractDirectSum\nsummands\nnsummands","category":"page"},{"location":"representations/spaces/#DecomposingGroupRepresentations.AbstractDirectSum","page":"Vector spaces","title":"DecomposingGroupRepresentations.AbstractDirectSum","text":"AbstractDirectSum{F} <: AbstractSpace{F}\n\nAn abstract type representing a direct sum of vector spaces over the field (or number type) F.\n\n\n\n\n\n","category":"type"},{"location":"representations/spaces/#DecomposingGroupRepresentations.summands","page":"Vector spaces","title":"DecomposingGroupRepresentations.summands","text":"summands(::AbstractDirectSum)\n\nReturns the summands of the given direct sum of vector spaces.\n\n\n\n\n\n","category":"function"},{"location":"representations/spaces/#DecomposingGroupRepresentations.nsummands","page":"Vector spaces","title":"DecomposingGroupRepresentations.nsummands","text":"nsummands(::AbstractDirectSum) -> Int\n\nReturns the number of summands in the given direct sum of vector spaces.\n\n\n\n\n\n","category":"function"},{"location":"representations/spaces/#Symmetric-powers","page":"Vector spaces","title":"Symmetric powers","text":"","category":"section"},{"location":"representations/spaces/","page":"Vector spaces","title":"Vector spaces","text":"AbstractSymmetricPower\nbase_space\npower\nFixedDegreePolynomials","category":"page"},{"location":"representations/spaces/#DecomposingGroupRepresentations.AbstractSymmetricPower","page":"Vector spaces","title":"DecomposingGroupRepresentations.AbstractSymmetricPower","text":"AbstractSymmetricPower{F} <: AbstractSpace{F}\n\nAn abstract type representing a symmetric power of a vector space over the field (or number type) F.\n\n\n\n\n\n","category":"type"},{"location":"representations/spaces/#DecomposingGroupRepresentations.base_space","page":"Vector spaces","title":"DecomposingGroupRepresentations.base_space","text":"base_space(::AbstractSymmetricPower) -> AbstractSpace\n\nReturns the base vector space of the given symmetric power. I.e. for mathrmSym^n(V), this function returns V.\n\n\n\n\n\n","category":"function"},{"location":"representations/spaces/#DecomposingGroupRepresentations.power","page":"Vector spaces","title":"DecomposingGroupRepresentations.power","text":"power(::AbstractSymmetricPower) -> Int\n\nReturns the power of the given symmetric power. I.e. for mathrmSym^n(V), this function returns n.\n\n\n\n\n\n","category":"function"},{"location":"representations/spaces/#DecomposingGroupRepresentations.FixedDegreePolynomials","page":"Vector spaces","title":"DecomposingGroupRepresentations.FixedDegreePolynomials","text":"FixedDegreePolynomials <: AbstractSymmetricPower\n\nA type representing a space of polynomials of a fixed degree. I.e., for the variables x_1 dots x_n and degree d gives mathbbFx_1 dots x_n_d, the space of polynomials in n variables of degree d.\n\nConstructors\n\nFixedDegreePolynomials(vars::Vector{<:Variable}, degree::Int)\n\nExamples\n\njulia> @polyvar x[1:3];\n\njulia> V = FixedDegreePolynomials(x, 2)\nFixedDegreePolynomials space of dimension 6\n variables: x₁, x₂, x₃\n degree: 2\n\njulia> base_space(V)\nVariableSpace with 3 variables\n number type (or field): ComplexF64\n variables: x₁, x₂, x₃\n\njulia> power(V)\n2\n\n\n\n\n\n","category":"type"},{"location":"representations/spaces/#Tensor-products","page":"Vector spaces","title":"Tensor products","text":"","category":"section"},{"location":"representations/spaces/","page":"Vector spaces","title":"Vector spaces","text":"AbstractTensorProduct\nfactors\nFixedMultidegreePolynomials","category":"page"},{"location":"representations/spaces/#DecomposingGroupRepresentations.AbstractTensorProduct","page":"Vector spaces","title":"DecomposingGroupRepresentations.AbstractTensorProduct","text":"AbstractTensorProduct{F} <: AbstractSpace{F}\n\nAn abstract type representing a tensor product of vector spaces over the field F.\n\n\n\n\n\n","category":"type"},{"location":"representations/spaces/#DecomposingGroupRepresentations.factors","page":"Vector spaces","title":"DecomposingGroupRepresentations.factors","text":"factors(::AbstractTensorProduct)\n\nReturns an iterator through the factors of the given tensor product.\n\n\n\n\n\n","category":"function"},{"location":"representations/spaces/#DecomposingGroupRepresentations.FixedMultidegreePolynomials","page":"Vector spaces","title":"DecomposingGroupRepresentations.FixedMultidegreePolynomials","text":"FixedMultidegreePolynomials <: AbstractTensorProduct\n\nA type representing a space of polynomials of a fixed multidegree in certain groups of variables. For example, for 2 groups of variables x_1dotsx_m and y_1dotsy_n, and degrees d_1 and d_2, this gives\n\nmathbbFx_1 dots x_m y_1 dots y_n_(d_1 d_2) cong mathbbFx_1 dots x_m_d_1 otimes mathbbFy_1 dots y_n_d_2\n\nthe space of multi-homogeneous polynomials in m+n variables of degree d_1 in the first group and  d_2 in the second group.\n\nConstructors\n\nFixedMultidegreePolynomials(var_groups::Vector{Vector{<:Variable}}, degrees::Vector{Int})\n\nExamples\n\njulia> @polyvar x[1:3] y[1:2];\n\njulia> V = FixedMultidegreePolynomials([x, y], [1, 1])\nFixedMultidegreePolynomials space of dimension 6\n variable groups: [x₁, x₂, x₃], [y₁, y₂]\n multidegree: [1, 1]\n\njulia> fs = factors(V)\n2-element Vector{FixedDegreePolynomials{ComplexF64, Commutative{CreationOrder}, Graded{LexOrder}}}:\n FixedDegreePolynomials space of dimension 3\n FixedDegreePolynomials space of dimension 2\n\njulia> fs[2]\nFixedDegreePolynomials space of dimension 2\n variables: y₁, y₂\n degree: 1\n\n\n\n\n\n","category":"type"},{"location":"representations/spaces/#HighestWeightModule","page":"Vector spaces","title":"HighestWeightModule","text":"","category":"section"},{"location":"representations/spaces/","page":"Vector spaces","title":"Vector spaces","text":"HighestWeightModule","category":"page"},{"location":"representations/spaces/#DecomposingGroupRepresentations.HighestWeightModule","page":"Vector spaces","title":"DecomposingGroupRepresentations.HighestWeightModule","text":"HighestWeightModule <: AbstractSpace\n\nRepresents a highest weight module in the context of Lie group representations.\n\nExamples\n\njulia> @polyvar x y z;\n\njulia> vars = [x, y, z];\n\njulia> SO3 = LieGroup(\"SO\", 3);\n\njulia> a = MatrixGroupAction(SO3, [vars]);\n\njulia> V = FixedDegreePolynomials(vars, 2);\n\njulia> ρ = GroupRepresentation(a, V);\n\njulia> irr_decomp = irreducibles(ρ)\nIrreducibleDecomposition of SO(3)-action on 6-dimensional vector space\n number of irreducibles: 2\n dimensions of irreducibles: 1, 5\n\njulia> H = space(irr_decomp[1])\nHighestWeightModule of dimension 1\n Lie group: SO(3)\n highest weight: [0]\n\njulia> basis(H)\n1-element Vector{Polynomial{Commutative{CreationOrder}, Graded{LexOrder}, ComplexF64}}:\n z² + y² + x²\n\n\n\n\n\n","category":"type"},{"location":"","page":"Introduction","title":"Introduction","text":"CurrentModule = DecomposingGroupRepresentations","category":"page"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"DecomposingGroupRepresentations.jl is a Julia package that provides an API for decomposing representations of reductive groups acting on multivariate polynomials using DynamicPolynomials.jl.","category":"page"},{"location":"#Quick-start","page":"Introduction","title":"Quick start","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"using DecomposingGroupRepresentations\n\n@polyvar x y z\nvars = [x, y, z]\n\nSO3 = LieGroup(\"SO\", 3)\na = MatrixGroupAction(SO3, [vars])\n\nV = FixedDegreePolynomials(vars, 2)\nρ = GroupRepresentation(a, V)\n\nirrs = IrreducibleDecomposition(ρ)\n[highest_weight(irr) for irr in irreducibles(irrs)]\n[vector(hw_vector(irr)) for irr in irreducibles(irrs)]\n\niso = IsotypicDecomposition(ρ)\nbasis(iso[Weight([0])]) # invariant\nH₂ = basis(iso[Weight([2])]) # spherical harmonics\nrref(H₂)","category":"page"},{"location":"groups/lie/#Lie-groups","page":"Lie groups","title":"Lie groups","text":"","category":"section"},{"location":"groups/lie/","page":"Lie groups","title":"Lie groups","text":"Lie groups in this Julia package are represented by the abstract type","category":"page"},{"location":"groups/lie/","page":"Lie groups","title":"Lie groups","text":"AbstractGroup{Lie, F}","category":"page"},{"location":"groups/lie/","page":"Lie groups","title":"Lie groups","text":"where F defines the field (or number type) over which the group is defined.","category":"page"},{"location":"groups/lie/","page":"Lie groups","title":"Lie groups","text":"The computations with Lie groups are done by passing to their associated Lie algebras. We distinguish between Lie groups that act by scalings (represented by ScalingLieGroup) and basic reductive matrix Lie groups, like mathrmSO(n) (represented by LieGroup).","category":"page"},{"location":"groups/lie/#Lie-groups-2","page":"Lie groups","title":"Lie groups","text":"","category":"section"},{"location":"groups/lie/","page":"Lie groups","title":"Lie groups","text":"ScalingLieGroup\nLieGroup","category":"page"},{"location":"groups/lie/#DecomposingGroupRepresentations.ScalingLieGroup","page":"Lie groups","title":"DecomposingGroupRepresentations.ScalingLieGroup","text":"ScalingLieGroup{F} <: AbstractGroup{Lie, F}\n\nRepresents a scaling Lie group. The group elements are diagonal matrices.\n\nConstructors\n\nScalingLieGroup{F}(size::Int) where F\nScalingLieGroup{F}(exps::Matrix{Int}) where F\n\nExamples\n\njulia> ScalingLieGroup{ComplexF64}(5)\nScalingLieGroup ℂˣ\n number type (or field): ComplexF64\n Lie algebra properties:\n  dimension: 1\n  basis (diagonal matrices):\n   [1, 1, 1, 1, 1]\n\njulia> exps = [1 1 1 0 0 0; 0 0 0 1 -2 0];\n\njulia> ScalingLieGroup{ComplexF64}(exps)\nScalingLieGroup (ℂˣ)²\n number type (or field): ComplexF64\n Lie algebra properties:\n  dimension: 2\n  basis (diagonal matrices):\n   [1, 1, 1, 0, 0, 0]\n   [0, 0, 0, 1, -2, 0]\n\n\n\n\n\n","category":"type"},{"location":"groups/lie/#DecomposingGroupRepresentations.LieGroup","page":"Lie groups","title":"DecomposingGroupRepresentations.LieGroup","text":"LieGroup{F} <: AbstractGroup{Lie, F}\n\nDescribes a matrix Lie group.\n\nConstructors\n\nLieGroup(type::String, size::Int)\n\nExamples\n\njulia> SO3 = LieGroup(\"SO\", 3)\nLieGroup SO(3)\n number type (or field): ComplexF64\n weight type: Int64\n Lie algebra properties:\n  dimension: 3\n  rank (dimension of Cartan subalgebra): 1\n\n\n\n\n\n","category":"type"},{"location":"groups/lie/","page":"Lie groups","title":"Lie groups","text":"note: Note\nSupported Lie group types and sizes: SO(3).","category":"page"},{"location":"groups/lie/#Lie-algebras","page":"Lie groups","title":"Lie algebras","text":"","category":"section"},{"location":"groups/lie/","page":"Lie groups","title":"Lie groups","text":"AbstractLieAlgebra\nalgebra(::AbstractGroup{Lie})\nname(::AbstractLieAlgebra)\nbasis(::AbstractLieAlgebra)\nchevalley_basis(::AbstractLieAlgebra)\ndim(::AbstractLieAlgebra)\nrank(::AbstractLieAlgebra)","category":"page"},{"location":"groups/lie/#DecomposingGroupRepresentations.AbstractLieAlgebra","page":"Lie groups","title":"DecomposingGroupRepresentations.AbstractLieAlgebra","text":"AbstractLieAlgebra{F}\n\nAn abstract type representing a Lie algebra. The type F represents the number field (or number type) over which the Lie algebra is defined.\n\n\n\n\n\n","category":"type"},{"location":"groups/lie/#DecomposingGroupRepresentations.algebra-Tuple{AbstractGroup{Lie}}","page":"Lie groups","title":"DecomposingGroupRepresentations.algebra","text":"algebra(::AbstractGroup{Lie, F}) -> AbstractLieAlgebra{F}\n\nReturns the Lie algebra of a given Lie group.\n\nExamples\n\njulia> SO3 = LieGroup(\"SO\", 3);\n\njulia> algebra(SO3)\nLieAlgebra 𝖘𝖔(3)\n number type (or field): ComplexF64\n weight type: Int64\n dimension: 3\n rank (dimension of Cartan subalgebra): 1\n\n\n\n\n\n","category":"method"},{"location":"groups/lie/#DecomposingGroupRepresentations.name-Tuple{AbstractLieAlgebra}","page":"Lie groups","title":"DecomposingGroupRepresentations.name","text":"name(::AbstractLieAlgebra) -> String\n\nReturns the name of the given Lie algebra.\n\n\n\n\n\n","category":"method"},{"location":"groups/lie/#DecomposingGroupRepresentations.basis-Tuple{AbstractLieAlgebra}","page":"Lie groups","title":"DecomposingGroupRepresentations.basis","text":"basis(::AbstractLieAlgebra)\n\nReturns a basis of the given Lie algebra. For example, the Lie algebra mathfrakso(3 mathbbC), consists of skew-symmetric matrices and hence its (standard) basis is given by the matrices\n\nleft \nbeginbmatrix 0  0  0  0  0  -1  0  1  0 endbmatrix\nbeginbmatrix 0  0  1  0  0  0  -1  0  0 endbmatrix\nbeginbmatrix 0  -1  0  1  0  0  0  0  0 endbmatrix\nright\n\n\n\n\n\n","category":"method"},{"location":"groups/lie/#DecomposingGroupRepresentations.chevalley_basis-Tuple{AbstractLieAlgebra}","page":"Lie groups","title":"DecomposingGroupRepresentations.chevalley_basis","text":"chevalley_basis(::AbstractLieAlgebra)\n\nReturns the Chevalley basis of the given Lie algebra. For example, for the Lie algebra mathfrakso(3 mathbbC) returns \n\nleft \nunderbracebeginbmatrix 0  0  -1  0  0  -i  1  i  0 endbmatrix_J_+\nunderbracebeginbmatrix 0  0  1  0  0  -i  -1  i  0 endbmatrix_J_-\nunderbracebeginbmatrix 0  -i  0  i  0  0  0  0  0 endbmatrix_J_3\nright\n\nwith the commutation relations\n\nbeginaligned\nJ_3 J_+ = J_+ \nJ_3 J_- = -J_- \nJ_+ J_- = 2J_3\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"groups/lie/#DecomposingGroupRepresentations.dim-Tuple{AbstractLieAlgebra}","page":"Lie groups","title":"DecomposingGroupRepresentations.dim","text":"dim(::AbstractLieAlgebra) -> Int\n\nReturns the dimension of the given Lie algebra.\n\n\n\n\n\n","category":"method"},{"location":"groups/lie/#DecomposingGroupRepresentations.rank-Tuple{AbstractLieAlgebra}","page":"Lie groups","title":"DecomposingGroupRepresentations.rank","text":"rank(::AbstractLieAlgebra) -> Int\n\nReturns the rank (i.e. the dimension of the Cartan subalgebra) of the given Lie algebra.\n\n\n\n\n\n","category":"method"},{"location":"representations/actions/#Group-actions","page":"Actions","title":"Group actions","text":"","category":"section"},{"location":"representations/actions/","page":"Actions","title":"Actions","text":"AbstractGroupAction\ngroup(::AbstractGroupAction)\nalgebra(::AbstractGroupAction{Lie})","category":"page"},{"location":"representations/actions/#DecomposingGroupRepresentations.AbstractGroupAction","page":"Actions","title":"DecomposingGroupRepresentations.AbstractGroupAction","text":"AbstractGroupAction{T<:GroupType, F}\n\nAn abstract type representing a group action. It is used to define how a group acts on a given vector space.\n\n\n\n\n\n","category":"type"},{"location":"representations/actions/#DecomposingGroupRepresentations.group-Tuple{AbstractGroupAction}","page":"Actions","title":"DecomposingGroupRepresentations.group","text":"group(::AbstractGroupAction) -> AbstractGroup\n\nReturns the group associated with a given AbstractGroupAction.\n\n\n\n\n\n","category":"method"},{"location":"representations/actions/#DecomposingGroupRepresentations.algebra-Tuple{AbstractGroupAction{Lie}}","page":"Actions","title":"DecomposingGroupRepresentations.algebra","text":"algebra(a::AbstractGroupAction{Lie}) -> AbstractLieAlgebra\n\nReturns the associated Lie algebra of the Lie group of the action.\n\n\n\n\n\n","category":"method"},{"location":"representations/actions/#MatrixGroupAction","page":"Actions","title":"MatrixGroupAction","text":"","category":"section"},{"location":"representations/actions/","page":"Actions","title":"Actions","text":"MatrixGroupAction","category":"page"},{"location":"representations/actions/#DecomposingGroupRepresentations.MatrixGroupAction","page":"Actions","title":"DecomposingGroupRepresentations.MatrixGroupAction","text":"struct MatrixGroupAction{T<:GroupType, F} <: AbstractGroupAction{T, F}\n\nRepresents a group action of a matrix group on a set of variables.\n\nConstructors\n\nMatrixGroupAction(G::S, vectors::AbstractVector{<:AbstractVector{V}}) where {S<:AbstractGroup, V<:Variable}\n\nExamples\n\njulia> @polyvar x[1:3] y[1:3];\n\njulia> SO3 = LieGroup(\"SO\", 3);\n\njulia> MatrixGroupAction(SO3, [x, y])\nMatrixGroupAction of SO(3)\n 2 vectors under action: [x₁, x₂, x₃], [y₁, y₂, y₃]\n\n\n\n\n\n","category":"type"},{"location":"representations/actions/#ScalingLieGroupAction","page":"Actions","title":"ScalingLieGroupAction","text":"","category":"section"},{"location":"representations/actions/","page":"Actions","title":"Actions","text":"ScalingLieGroupAction","category":"page"},{"location":"representations/actions/#DecomposingGroupRepresentations.ScalingLieGroupAction","page":"Actions","title":"DecomposingGroupRepresentations.ScalingLieGroupAction","text":"ScalingLieGroupAction <: AbstractGroupAction\n\nRepresents an action of a scaling Lie group on a set of variables.\n\nConstructors\n\nScalingLieGroupAction(v::Vector{<:Variable})\nScalingLieGroupAction(V::AbstractMatrix{<:Variable})\nScalingLieGroupAction(G::ScalingLieGroup, v::Vector{<:Variable})\n\nExamples\n\njulia> @polyvar x[1:2, 1:3];\n\njulia> ScalingLieGroupAction(x)\nScalingLieGroupAction of (ℂˣ)³\n vector under action: [x₁₋₁, x₂₋₁, x₁₋₂, x₂₋₂, x₁₋₃, x₂₋₃]\n action:\n  x₁₋₁ ↦ λ₁x₁₋₁, x₂₋₁ ↦ λ₁x₂₋₁\n  x₁₋₂ ↦ λ₂x₁₋₂, x₂₋₂ ↦ λ₂x₂₋₂\n  x₁₋₃ ↦ λ₃x₁₋₃, x₂₋₃ ↦ λ₃x₂₋₃\n\njulia> ScalingLieGroupAction(x[:])\nScalingLieGroupAction of ℂˣ\n vector under action: [x₁₋₁, x₂₋₁, x₁₋₂, x₂₋₂, x₁₋₃, x₂₋₃]\n action:\n  x₁₋₁ ↦ λx₁₋₁, x₂₋₁ ↦ λx₂₋₁, x₁₋₂ ↦ λx₁₋₂, x₂₋₂ ↦ λx₂₋₂, x₁₋₃ ↦ λx₁₋₃, x₂₋₃ ↦ λx₂₋₃\n\n\n\n\n\n","category":"type"},{"location":"representations/actions/#DirectProductGroupAction","page":"Actions","title":"DirectProductGroupAction","text":"","category":"section"},{"location":"representations/actions/","page":"Actions","title":"Actions","text":"DirectProductGroupAction","category":"page"},{"location":"representations/actions/#DecomposingGroupRepresentations.DirectProductGroupAction","page":"Actions","title":"DecomposingGroupRepresentations.DirectProductGroupAction","text":"struct DirectProductGroupAction <: AbstractGroupAction\n\nRepresents an action of a direct product group on a vector space.\n\nExamples\n\njulia> @polyvar x[1:3, 1:2];\n\njulia> SO3 = LieGroup(\"SO\", 3);\n\njulia> a₁ = MatrixGroupAction(SO3, eachcol(x))\nMatrixGroupAction of SO(3)\n 2 vectors under action: [x₁₋₁, x₂₋₁, x₃₋₁], [x₁₋₂, x₂₋₂, x₃₋₂]\n\njulia> a₂ = ScalingLieGroupAction(x)\nScalingLieGroupAction of (ℂˣ)²\n vector under action: [x₁₋₁, x₂₋₁, x₃₋₁, x₁₋₂, x₂₋₂, x₃₋₂]\n action:\n  x₁₋₁ ↦ λ₁x₁₋₁, x₂₋₁ ↦ λ₁x₂₋₁, x₃₋₁ ↦ λ₁x₃₋₁\n  x₁₋₂ ↦ λ₂x₁₋₂, x₂₋₂ ↦ λ₂x₂₋₂, x₃₋₂ ↦ λ₂x₃₋₂\n\njulia> a₁ × a₂\nDirectProductGroupAction of SO(3) × (ℂˣ)²\n lie actions:\n\n\n\n\n\n","category":"type"}]
}
